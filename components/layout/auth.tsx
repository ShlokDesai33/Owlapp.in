import useSession from '../../hooks/useSession'
import Head from 'next/head'
import Spinner from '../lib/spinner'
import Image from 'next/image'
import logoSvg from '../../public/images/logo.svg'
import { useRouter } from 'next/router'
import blueCheck from '../../public/images/blue-check.svg'
import { Fragment } from 'react'
import { Disclosure, Menu, Transition } from '@headlessui/react'
import { List, X } from 'phosphor-react'
import Link from 'next/link'
import SearchBanner from './components/banner'

const navigation = [
  { name: 'Home', href: '/dashboard' },
  { name: 'Search', href: '/dashboard/search' },
  // { name: 'Social', href: '/dashboard/social' },
]
const userNavigation = [
  { name: 'Your Profile', href: '/dashboard/profile' },
  // { name: 'Settings', href: '/dashboard/profile/settings' },
  { name: 'Sign out', href: '/auth/signout' },
]

const headerUrls = [
  '/dashboard',
  '/dashboard/social',
  '/dashboard/profile',
  '/dashboard/profile/settings',
]

function classNames(...classes: string[]) {
  return classes.filter(Boolean).join(' ');
}

function capitalize(str: string) {
  return str.charAt(0).toUpperCase() + str.slice(1);
}

export default function LayoutWithAuth({ children }: { children: React.ReactNode }) {
  const { status, user } = useSession();
  const router = useRouter();

  if (status !== 'authenticated' || !user) {
    // status could be 'loading' or 'not authenticated'
    if (status === 'unauthenticated') {
      // redirect to login page
      router.push('/auth/signin');
    }
    // loading state
    return (
      <>
        <Head>
          <title>Instrumus</title>
          <meta name="description" content="Generated by create next app" />
          <meta name="viewport" content="width=device-width, initial-scale=1.0"></meta>
          <meta name="author" content="Owl"></meta>
          <link rel="icon" href="/images/favicon.ico" />
        </Head>

        <div className="flex w-hull h-full items-center justify-center">
          <Spinner />
        </div>
      </>
    );
  }
  else {
    return (
      <>
        <Head>
          <meta name="description" content="Generated by create next app" />
          <meta name="viewport" content="width=device-width, initial-scale=1.0"></meta>
          <meta name="author" content="Owl"></meta>
          <link rel="icon" href="/images/favicon.ico" />
        </Head>

        <div className="h-full flex flex-col">
          <Disclosure as="nav" className="bg-gray-800">
            {({ open }) => (
              <>
                <div className="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8">
                  <div className="flex h-16 items-center justify-between">
                    <div className="flex items-center">
                      <div className="flex-shrink-0 bg-white flex items-center rounded-full">
                        <Image
                          src={logoSvg}
                          alt="Logo"
                          width={35}
                          height={35}
                        />
                      </div>
                      <div className="hidden md:block">
                        <div className="ml-10 flex items-baseline space-x-4">
                          {navigation.map((item) => (
                            <Link
                              key={item.name}
                              href={item.href}
                              aria-current={router.pathname === item.href ? 'page' : undefined}
                            >
                              <button className={classNames(
                                router.pathname === item.href
                                  ? 'bg-gray-900 text-white'
                                  : 'text-gray-300 hover:bg-gray-700 hover:text-white',
                                'px-3 py-2 rounded-md text-sm font-medium'
                              )}>
                                {item.name}
                              </button>
                            </Link>
                          ))}
                        </div>
                      </div>
                    </div>
                    <div className="hidden md:block">
                      <div className="ml-4 flex items-center md:ml-6">
                        {/* Profile dropdown */}
                        <Menu as="div" className="relative ml-3">
                          <div>
                            <Menu.Button className="flex max-w-xs items-center rounded-full bg-gray-800 text-sm focus:outline-none focus:ring-2 focus:ring-white focus:ring-offset-2 focus:ring-offset-gray-800">
                              <span className="sr-only">Open user menu</span>
                              <Image
                                className="h-8 w-8 rounded-full"
                                src={user.image}
                                alt="User Image"
                                width={32}
                                height={32}
                              />
                            </Menu.Button>
                          </div>
                          <Transition
                            as={Fragment}
                            enter="transition ease-out duration-100"
                            enterFrom="transform opacity-0 scale-95"
                            enterTo="transform opacity-100 scale-100"
                            leave="transition ease-in duration-75"
                            leaveFrom="transform opacity-100 scale-100"
                            leaveTo="transform opacity-0 scale-95"
                          >
                            <Menu.Items className="absolute right-0 z-10 mt-2 w-48 origin-top-right rounded-md bg-white py-1 shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none">
                              {userNavigation.map((item) => (
                                <Menu.Item key={item.name}>
                                  {() => (
                                    <Link
                                      href={item.href}
                                      legacyBehavior={false}
                                    >
                                      <button className="block px-4 py-2 text-sm text-gray-700 w-full text-left hover:bg-gray-100">
                                        {item.name}
                                      </button>
                                    </Link>
                                  )}
                                </Menu.Item>
                              ))}
                            </Menu.Items>
                          </Transition>
                        </Menu>
                      </div>
                    </div>
                    <div className="-mr-2 flex md:hidden">
                      {/* Mobile menu button */}
                      <Disclosure.Button className="inline-flex items-center justify-center rounded-md bg-gray-800 p-2 text-gray-400 hover:bg-gray-700 hover:text-white focus:outline-none focus:ring-2 focus:ring-white focus:ring-offset-2 focus:ring-offset-gray-800">
                        <span className="sr-only">Open main menu</span>
                        {open ? (
                          <X className="block h-6 w-6" aria-hidden="true" />
                        ) : (
                          <List className="block h-6 w-6" aria-hidden="true" />
                        )}
                      </Disclosure.Button>
                    </div>
                  </div>
                </div>

                <Disclosure.Panel className="md:hidden">
                  <div className="space-y-1 px-2 pt-2 pb-3 sm:px-3">
                    {navigation.map((item) => (
                      <Link
                        key={item.name}
                        href={item.href}
                        aria-current={router.pathname === item.href ? 'page' : undefined}
                      >
                        <button className={classNames(
                          router.pathname === item.href ? 'bg-gray-900 text-white' : 'text-gray-300 hover:bg-gray-700 hover:text-white',
                          'block px-3 py-2 rounded-md text-base font-medium w-full text-left'
                        )}>
                          {item.name}
                        </button>
                      </Link>
                    ))}
                  </div>
                  
                  <div className="border-t border-gray-700 pt-4 pb-3">
                    <div className="flex items-center px-5">
                      <div className="flex-shrink-0">
                        <Image
                          className="h-10 w-10 rounded-full"
                          src={user.image}
                          alt="User Image"
                          width={40}
                          height={40}
                        />
                      </div>
                      <div className="ml-3 mr-2">
                        <div className="text-base font-medium leading-none text-white">{user.name}</div>
                        <div className="text-sm font-medium leading-none text-gray-400 mt-1">{user.email}</div>
                      </div>
                      {
                        user.status === 'verified' &&
                        (
                          <Image
                            src={blueCheck}
                            width={25}
                            height={25}
                            alt="Verified Check"
                          />
                        )
                      }
                    </div>

                    <div className="mt-3 space-y-1 px-2">
                      {userNavigation.map((item) => (
                        <Link
                          key={item.name}
                          href={item.href}
                        >
                          <button className={classNames(
                            router.pathname === item.href ? 'bg-gray-900 text-white' : 'text-gray-300 hover:bg-gray-700 hover:text-white',
                            'block px-3 py-2 rounded-md text-base font-medium w-full text-left'
                          )}>
                            {item.name}
                          </button>
                        </Link>
                      ))}
                    </div>
                  </div>
                </Disclosure.Panel>
              </>
            )}
          </Disclosure>

          <div className="grow overflow-y-scroll" id="no_sb">
            {
              router.pathname === '/dashboard' && (
                <SearchBanner />
              )
            }

            {
              headerUrls.includes(router.pathname) && (
                <header className="bg-white shadow">
                  <div className="mx-auto max-w-7xl py-6 px-4 sm:px-6 lg:px-8">
                    <h1 className="text-3xl font-bold tracking-tight text-gray-800">
                      {capitalize(router.pathname.split('/').pop() as string)}
                    </h1>
                  </div>
                </header>
              )
            }

            <main className="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8 h-full">
              {children}
            </main>
          </div>
        </div>
      </>
    );
  }
}